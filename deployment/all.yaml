apiVersion: v1
kind: Namespace
metadata:
  name: light-linkerd-demo-app
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: light-linkerd-demo-app
  labels:
    app: backend
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: light-linkerd-demo-app
  name: backend
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: python:3.13-alpine
          command: ["python3", "-m", "http.server", "8080"]
          ports:
            - containerPort: 8080
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
            requests:
              memory: "64Mi"
              cpu: "50m"
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: light-linkerd-demo-app
  labels:
    app: frontend
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 5000
      nodePort: 32281
  selector:
    app: frontend
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: light-linkerd-demo-app
  name: frontend
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: registry.sva.marius-reinhardt.de/docker/library/python:3.13-slim
          command: ["/bin/sh", "-c", "pip install flask requests && python3 /app/app.py"]
          env:
            - name: BACKEND_URL
              value: "http://backend:80"
          ports:
            - containerPort: 5000
          volumeMounts:
            - mountPath: /app
              name: frontend-app-code
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
            requests:
              memory: "64Mi"
              cpu: "50m"
        - name: curl
          image: registry.sva.marius-reinhardt.de/docker/curlimages/curl:8.10.1
          command: ["/bin/sh"]
          args: ["-c", "while true; do sleep 3600; done"]
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
            requests:
              memory: "64Mi"
              cpu: "50m"
      volumes:
        - name: frontend-app-code
          configMap:
            name: frontend-app-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: light-linkerd-demo-app
  name: frontend-app-config
data:
  app.py: |
    from flask import Flask, render_template_string, request
    import requests
    import os

    app = Flask(__name__)

    backend_url = os.getenv("BACKEND_URL", "http://backend:8080")

    html_template = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Frontend</title>
    </head>
    <body>
        <h1>Frontend Application</h1>
        <button onclick="fetchData()">Click to Connect to Backend</button>
        <p id="response"></p>
        <script>
            async function fetchData() {
                const response = await fetch('/connect');
                const text = await response.text();
                document.getElementById('response').innerText = text;
            }
        </script>
    </body>
    </html>
    """

    @app.route('/')
    def index():
        return render_template_string(html_template)

    @app.route('/connect', methods=['GET'])
    def connect():
        try:
            resp = requests.get(backend_url)
            return f"Backend Response: {resp.text}", 200
        except Exception as e:
            return f"Error connecting to backend: {e}", 500

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000)
